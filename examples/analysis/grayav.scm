;; 2019-08-27.  examples/analysis/grayav.scm

(load "~/git/minlog/init.scm")

(set! COMMENT-FLAG #f)
(libload "nat.scm")
(libload "list.scm")
(libload "str.scm")
(libload "pos.scm")
(libload "int.scm")
(libload "rat.scm")
(remove-var-name "x" "y" "z")
(libload "rea.scm")
;; (set! COMMENT-FLAG #t)

(load "~/git/minlog/examples/analysis/digits.scm")
(load "~/git/minlog/examples/analysis/sdcode.scm")
(load "~/git/minlog/examples/analysis/graycode.scm")
(load "~/git/minlog/examples/analysis/JK.scm")
(load "~/git/minlog/examples/analysis/grayavaux.scm")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Haskell translation
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; terms-to-haskell-program (written by Fredrik Nordvall-Forsberg)
;; generates a Haskell file (here sdavtest.hs).  To run it, in a
;; terminal type ghci sdavtest.hs.  Then in *Main> one can evaluate
;; the Haskell functions in grayavtest.hs.  To quit type *Main> :q.

'(
(animate "RealToCoI")
(animate "RealToCoIAux")
(animate "ApproxSplitZeroMinusPtFive")
(animate "ApproxSplitZeroPtFive")
(animate "ApproxSplit")
(animate "CoGAvcToCoG")
(animate "CoGAvToAvc")
(animate "CoGAvcSatCoICl")
(animate "SdDisj")
(animate "IntTimesSdtwoPsdToSdtwo")
(animate "SdtwoToSdtwoJ")
(animate "SdtwoToSdK")
(animate "SdtwoPsdToSdtwoJ")
(animate "SdtwoPsdToSdK")
(animate "CoGAvcSatCoIClAuxJ")
(animate "CoGAvcSatCoIClAuxK")
(animate "PsdToSdtwo")
(animate "CoHToCoG")
(animate "CoGCompat")
(animate "CoGUMinus")
(animate "CoHClosure")
(animate "CoGClauseInv")
(animate "CoHCompat")
(animate "CoHClauseInv")
(animate "Rht")
(animate "PsdUMinus")
(animate "Lft")
(animate "CoGPsdTimes")
(animate "CoGClosure")
(animate "IntPlusPsdToSdtwo")
(animate "SdToPsd")
(animate "CoICompat")
(animate "PsdToDisj")
(animate "CoIUMinus")
(animate "SdUMinus")
(animate "CoIClosure")
(animate "CoIClauseInv")

(terms-to-haskell-program
 "~/temp/grayavtest.hs"
 (list (list CoGAverage-eterm "cogav")
       (list CoIToCoG-eterm "coitocog")
       (list RealToCoI-eterm "realtocoi")
       (list RatToCoI-eterm "rattocoi")
       (list (pt "SdMs") "sdms")
       (list (pt "PtFive") "ptfive")
       (list (pt "MPtFive") "mptfive")
       (list (pt "OneSdR") "onesdr")
       (list (pt "OneSdL") "onesdl")
       (list (pt "SqrtTwoOverTwo") "stot")
       (list (pt "TakeStr") "takestr")
       (list (pt "ListSdToRat") "listsdtorat")))

(deanimate "RealToCoI")
(deanimate "RealToCoIAux")
(deanimate "ApproxSplitZeroMinusPtFive")
(deanimate "ApproxSplitZeroPtFive")
(deanimate "ApproxSplit")
(deanimate "CoGAvcToCoG")
(deanimate "CoGAvToAvc")
(deanimate "CoGAvcSatCoICl")
(deanimate "SdDisj")
(deanimate "IntTimesSdtwoPsdToSdtwo")
(deanimate "SdtwoToSdtwoJ")
(deanimate "SdtwoToSdK")
(deanimate "SdtwoPsdToSdtwoJ")
(deanimate "SdtwoPsdToSdK")
(deanimate "CoGAvcSatCoIClAuxJ")
(deanimate "CoGAvcSatCoIClAuxK")
(deanimate "PsdToSdtwo")
(deanimate "CoHToCoG")
(deanimate "CoGCompat")
(deanimate "CoGUMinus")
(deanimate "CoHClosure")
(deanimate "CoGClauseInv")
(deanimate "CoHCompat")
(deanimate "CoHClauseInv")
(deanimate "Rht")
(deanimate "PsdUMinus")
(deanimate "Lft")
(deanimate "CoGPsdTimes")
(deanimate "CoGClosure")
(deanimate "IntPlusPsdToSdtwo")
(deanimate "SdToPsd")
(deanimate "CoICompat")
(deanimate "PsdToDisj")
(deanimate "CoIUMinus")
(deanimate "SdUMinus")
(deanimate "CoIClosure")
(deanimate "CoIClauseInv")
)

;; ghci grayavtest.hs

;; cogav (coitocog (rattocoi (1 % 3))) (coitocog (rattocoi (4 % 7)))
;; LR True (U (D (Fin True (U (Fin False (U (D (D (Fin False (U (Fin False (U

;; cogav (coitocog (realtocoi stot)) (coitocog (rattocoi (4 % 7)))
;; LR True (LR False (LR True (U (D (Fin True (U (D (Fin False (U (Fin False 

